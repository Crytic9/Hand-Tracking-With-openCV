import cv2
import numpy as np

# Initialize the webcam
cap = cv2.VideoCapture(0)

# Define the first frame
_, first_frame = cap.read()

# Define the palm color range in HSV
lower_color = np.array([0, 20, 70], dtype=np.uint8)
upper_color = np.array([20, 255, 255], dtype=np.uint8)

# Set the time for speed calculation
time_start = cv2.getTickCount()

while True:
    # Capture the current frame
    _, frame = cap.read()

    # Convert the frame to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Create a mask for the palm color
    mask = cv2.inRange(hsv, lower_color, upper_color)

    # Filter the mask to reduce noise
    kernel = np.ones((5,5), np.uint8)
    mask = cv2.erode(mask, kernel, iterations=2)
    mask = cv2.dilate(mask, kernel, iterations=2)

    # Find the contours of the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Find the largest contour
    if len(contours) > 0:
        max_contour = max(contours, key=cv2.contourArea)
        (x, y), radius = cv2.minEnclosingCircle(max_contour)
        center = (int(x), int(y))
        radius = int(radius)

        # Draw the circle around the palm
        cv2.circle(frame, center, radius, (0, 0, 255), 2)

        # Calculate the distance and speed
        time_end = cv2.getTickCount()
        time = (time_end - time_start) / cv2.getTickFrequency()
        distance = radius * time
        speed = distance / time

        # Display the speed on the frame
        cv2.putText(frame, "Speed: {:.2f} px/s".format(speed), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

    # Display the frame
    cv2.imshow("Palm Tracker", frame)

    # Exit the program when the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close the window
cap.release()
cv2.destroyAllWindows()
